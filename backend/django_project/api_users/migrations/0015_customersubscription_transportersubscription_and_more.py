# Generated by Django 5.0.2 on 2024-08-29 03:29
# Generated by Django 5.0.2 on 2024-08-27 19:16

import django.db.models.deletion
from django.db import migrations, models


def create_initial_subscriptions(apps, schema_editor):
    CustomerCompany = apps.get_model('api_users', 'CustomerCompany')
    TransporterCompany = apps.get_model('api_users', 'TransporterCompany')

    CustomerCompany.objects.update(subscription=None)
    TransporterCompany.objects.update(subscription=None)

    CustomerSubscription = apps.get_model('api_users', 'CustomerSubscription')
    TransporterSubscription = apps.get_model(
        'api_users', 'TransporterSubscription')

    if not CustomerSubscription.objects.exists():
        CustomerSubscription.objects.create(
            codename='all_functionality',
            name='Весь функционал',
            price=0,
            days_without_payment=0
        )
        CustomerSubscription.objects.create(
            codename='all_functionality_and_find_cargo',
            name='Весь функционал + Грузополучатель',
            price=0,
            days_without_payment=0
        )

    if not TransporterSubscription.objects.exists():
        TransporterSubscription.objects.create(
            codename='all_functionality_and_application',
            name='Весь функционал + Приложение',
            price=0,
            win_percentage_fee=0,
            days_without_payment=0
        )


def remove_initial_subscriptions(apps, schema_editor):
    CustomerCompany = apps.get_model('api_users', 'CustomerCompany')
    TransporterCompany = apps.get_model('api_users', 'TransporterCompany')
    CustomerSubscription = apps.get_model('api_users', 'CustomerSubscription')
    TransporterSubscription = apps.get_model(
        'api_users', 'TransporterSubscription')

    CustomerCompany.objects.update(subscription='customer_unpaid')
    TransporterCompany.objects.update(subscription='transporter_unpaid')

    CustomerSubscription.objects.all().delete()
    TransporterSubscription.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api_users', '0014_auto_20240829_0825'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=50,
                 unique=True, verbose_name='Кодовое имя')),
                ('name', models.CharField(
                    max_length=100, verbose_name='Название тарифа')),
                ('price', models.DecimalField(decimal_places=2,
                 max_digits=10, verbose_name='Стоимость')),
                ('days_without_payment', models.IntegerField(
                    verbose_name='Количество дней без оплаты')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы Заказчик',
            },
        ),
        migrations.CreateModel(
            name='TransporterSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True,
                 primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=50,
                 unique=True, verbose_name='Кодовое имя')),
                ('name', models.CharField(
                    max_length=100, verbose_name='Название тарифа')),
                ('price', models.DecimalField(decimal_places=2,
                 max_digits=10, verbose_name='Стоимость')),
                ('win_percentage_fee', models.DecimalField(decimal_places=2,
                 max_digits=10, verbose_name='% от суммы выигранной перевозки')),
                ('days_without_payment', models.IntegerField(
                    verbose_name='Количество дней без оплаты')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы Перевозчик',
            },
        ),
        migrations.RunPython(create_initial_subscriptions,
                             reverse_code=remove_initial_subscriptions),
        migrations.AddField(
            model_name='customercompany',
            name='balance',
            field=models.DecimalField(
                decimal_places=2, default=0, max_digits=10, verbose_name='Баланс компании'),
        ),
        migrations.AddField(
            model_name='transportercompany',
            name='balance',
            field=models.DecimalField(
                decimal_places=2, default=0, max_digits=10, verbose_name='Баланс компании'),
        ),
        migrations.AlterField(
            model_name='customercompany',
            name='allowed_transporter_companies',
            field=models.ManyToManyField(related_name='allowed_customer_companies',
                                         to='api_users.transportercompany', verbose_name='Перевозчики компании'),
        ),
        migrations.AlterField(
            model_name='usermodel',
            name='user_type',
            field=models.CharField(choices=[('customer_company', 'Заказчик (компания)'), ('customer_manager', 'Заказчик (менеджер)'), ('transporter_company', 'Перевозчик (компания)'), (
                'transporter_manager', 'Перевозчик (менеджер)'), ('driver', 'Водитель'), ('super_admin', 'Супер админ')], max_length=20, verbose_name='Тип'),
        ),
        migrations.AlterField(
            model_name='customercompany',
            name='subscription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='api_users.customersubscription', verbose_name='Тариф'),
        ),
        migrations.AlterField(
            model_name='transportercompany',
            name='subscription',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to='api_users.transportersubscription', verbose_name='Тариф'),
        ),
        migrations.DeleteModel(
            name='OrderViewer',
        ),
    ]
