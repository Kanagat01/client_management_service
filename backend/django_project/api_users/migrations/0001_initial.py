# Generated by Django 5.0.2 on 2024-05-19 15:27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('api_auction', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=300, unique=True, verbose_name='Электронная почта')),
                ('blocked', models.BooleanField(default=False, verbose_name='Заблокирован')),
                ('user_type', models.CharField(choices=[('customer_company', 'Заказчик (компания)'), ('customer_manager', 'Заказчик (менеджер)'), ('transporter_company', 'Перевозчик (компания)'), ('transporter_manager', 'Перевозчик (менеджер)'), ('order_viewer', 'Просмотрщик заказов'), ('driver', 'Водитель'), ('super_admin', 'Супер админ')], max_length=20, verbose_name='Тип')),
                ('full_name', models.CharField(max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CustomerCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=200, verbose_name='Название компании')),
                ('subscription', models.CharField(choices=[('customer_unpaid', 'Заказчик НЕоплаченный'), ('customer_paid', 'Заказчик оплаченный')], default='customer_unpaid', max_length=300, verbose_name='Подписка')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_company', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Компания заказчика',
                'verbose_name_plural': 'Компании заказчиков',
            },
        ),
        migrations.CreateModel(
            name='CustomerManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managers', to='api_users.customercompany')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_manager', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Менеджер заказчика',
                'verbose_name_plural': 'Менеджеры заказчиков',
            },
        ),
        migrations.CreateModel(
            name='OrderViewer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewers', to='api_auction.ordermodel')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='order_viewer', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Просмотр заказа',
                'verbose_name_plural': 'Просмотры заказов',
            },
        ),
        migrations.CreateModel(
            name='TransporterCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=200, verbose_name='Название компании')),
                ('subscription', models.CharField(choices=[('transporter_unpaid', 'Перевозчик НЕоплаченный'), ('transporter_paid', 'Перевозчик оплаченный')], default='transporter_unpaid', max_length=300, verbose_name='Подписка')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='transporter_company', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Компания перевозчика',
                'verbose_name_plural': 'Компании перевозчиков',
            },
        ),
        migrations.CreateModel(
            name='DriverProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField(verbose_name='Дата рождения')),
                ('passport_number', models.CharField(max_length=20, verbose_name='Номер паспорта')),
                ('machine_data', models.CharField(max_length=300, verbose_name='Данные о машине')),
                ('machine_number', models.CharField(max_length=20, verbose_name='Номер машины')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='driver_profile', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drivers', to='api_users.transportercompany')),
            ],
            options={
                'verbose_name': 'Профиль водителя',
                'verbose_name_plural': 'Профили водителей',
            },
        ),
        migrations.AddField(
            model_name='customercompany',
            name='allowed_transporter_companies',
            field=models.ManyToManyField(related_name='allowed_customer_companies', to='api_users.transportercompany'),
        ),
        migrations.CreateModel(
            name='TransporterManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='managers', to='api_users.transportercompany')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='transporter_manager', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Менеджер перевозчика',
                'verbose_name_plural': 'Менеджеры перевозчиков',
            },
        ),
    ]
