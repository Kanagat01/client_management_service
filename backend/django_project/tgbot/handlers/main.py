import requests
from datetime import datetime, timedelta
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from misc.states import UserFSM
from keyboards.reply import UserReplyKeyboard


def validate_group(group_name):
    url = f"https://ruz.fa.ru/api/search?term={group_name}&type=group"
    response = requests.get(url)

    if not response.status_code == 200:
        return None

    for group in response.json():
        if group.get("label") == group_name:
            return group


def get_schedule(group_id):
    data = []

    now = datetime.now()
    if now.month >= 9:
        last_date_in_year = datetime(year=now.year + 1, month=7, day=1)
    else:
        last_date_in_year = datetime(year=now.year, month=7, day=1)

    start_date = now
    base_url = "https://ruz.fa.ru/api/schedule/group"
    work_types = ["–ó–∞—á–µ—Ç—ã", "–≠–∫–∑–∞–º–µ–Ω—ã", "–°–µ–º–∏–Ω–∞—Ä+–∑–∞—á–µ—Ç",
                  "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è (–∑–∞—á–µ—Ç)", "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è (—ç–∫–∑–∞–º–µ–Ω)"]

    while start_date < last_date_in_year:
        finish_date = min(start_date + timedelta(days=120), last_date_in_year)
        url = f"{base_url}/{group_id}?start={start_date.strftime('%Y.%m.%d')}&finish={finish_date.strftime('%Y.%m.%d')}"
        response = requests.get(url)

        if response.status_code == 200:
            resp_data = [x for x in response.json() if x["kindOfWork"]
                         in work_types]
            data.extend(resp_data)

        start_date = finish_date + timedelta(days=1)

    return data


def parse_schedule(data: list[dict]):
    if len(data) == 0:
        return ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"]

    schedule = {}
    for lesson in data:
        subject = lesson.get("discipline", "").strip()
        if not subject:
            continue

        lesson_info = f'‚è±Ô∏è {lesson["beginLesson"]} - {lesson["endLesson"]} ‚è±Ô∏è\n' \
                      f'<b>{subject}</b>\n' \
                      f'{lesson["kindOfWork"]}\n' \
                      f'–ö—Ç–æ: {lesson.get("lecturer", "")}\n'

        date = datetime.strptime(lesson["date"], "%Y.%m.%d")
        date_str = date.strftime("%d.%m.%Y")
        if date_str in schedule:
            schedule[date_str].append(lesson_info)
        else:
            weekday = date.strftime("%A")
            days_of_week = {
                "Monday": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "Tuesday": "–í—Ç–æ—Ä–Ω–∏–∫",
                "Wednesday": "–°—Ä–µ–¥–∞",
                "Thursday": "–ß–µ—Ç–≤–µ—Ä–≥",
                "Friday": "–ü—è—Ç–Ω–∏—Ü–∞",
                "Saturday": "–°—É–±–±–æ—Ç–∞",
                "Sunday": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
            }
            nums = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£",
                    "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
            schedule[date_str] = [
                f'{nums[len(schedule)]} {days_of_week.get(weekday, weekday)}, {date_str}\n\n{lesson_info}']
    return ["\n".join(lessons) for lessons in schedule.values()]


router = Router()


@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(UserFSM.group)
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã \n\n–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ò18-1¬ª")


@router.message(UserFSM.group)
async def get_group(message: Message, state: FSMContext):
    group: dict = validate_group(message.text)
    if group:
        await state.update_data(group=group)
        await state.set_state(UserFSM.password)
        await message.answer(f"–ì—Ä—É–ø–ø–∞ {group['label']} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")

        await render_main_menu(state, message, group["id"])
    else:
        await message.answer(f"–ì—Ä—É–ø–ø–∞ ¬´{group}¬ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç \n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–∞ http://ruz.fa.ru/ruz")


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    group_id = state_data["group"]["id"]
    await render_main_menu(state, callback.message, group_id)


async def render_main_menu(state: FSMContext, message: Message, group_id: int | str):
    schedule_data = get_schedule(group_id)
    await state.update_data(schedule_data=schedule_data)

    for idx, schedule in enumerate(parse_schedule(schedule_data)):
        kb = UserReplyKeyboard.main_menu_kb() if idx == len(schedule_data) - 1 else None
        await message.answer(schedule, reply_markup=kb)
