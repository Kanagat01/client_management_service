import requests
from bs4 import BeautifulSoup
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton,InlineKeyboardMarkup,CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from aiogram.utils.markdown import bold


class UserFSM(StatesGroup):
    role = State()
    login = State()
    password = State()
    group = State()
    schedule_action = State()


router = Router()

role_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")],
        [KeyboardButton(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")]
    ],
    resize_keyboard=True
)

schedule_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è")],
        [KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [KeyboardButton(text="–≠—Ç–∞ –Ω–µ–¥–µ–ª—è")],
        [KeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è")],
        [KeyboardButton(text="–ü–æ–∏—Å–∫")],
        [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)

search_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å", callback_data="search_day")],
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="search_teacher")],
        [InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã", callback_data="search_group")]
    ]
)

setting_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—åüì≤", callback_data="add_calendar")],
        [InlineKeyboardButton(text="–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="display_schedule")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="subs_schedule")]
    ]
)

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    await state.set_state(UserFSM.role)
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å! \n –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è ", reply_markup=role_keyboard)


@router.message(F.text == "–ü–æ–∏—Å–∫")
async def search_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏—Å–∫–∞—Ç—å:", reply_markup=search_keyboard)


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å", reply_markup=setting_keyboard)


@router.message(UserFSM.role)
async def choose_role(message: Message, state: FSMContext):
    if message.text.lower() == "—Å—Ç—É–¥–µ–Ω—Ç":
        await state.set_state(UserFSM.login)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    elif message.text.lower() == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
        await message.answer("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å: –°—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")


@router.message(UserFSM.login)
async def enter_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await state.set_state(UserFSM.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@router.message(UserFSM.password)
async def enter_password(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data["login"]
    password = message.text

    response = requests.post("https://campus.fa.ru/login/index.php", data={"username": login, "password": password})
    soup = BeautifulSoup(response.text, 'html.parser')
    title = soup.title.string if soup.title else ""

    if "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" in title:
        await state.set_state(UserFSM.group)
        await message.answer("–£—Å–ø–µ—à–Ω–æ: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã: \n –ù–∞–ø—Ä–∏–º–µ—Ä '–ü–ò18-1'")
    else:
        await state.clear()
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")


@router.message(UserFSM.group)
async def enter_group(message: Message, state: FSMContext):
    group_name = message.text
    group_id = validate_group(group_name)

    if group_id:
        await state.update_data(group=group_name, group_id=group_id)
        await state.set_state(UserFSM.schedule_action)
        await message.answer(f"–ì—Ä—É–ø–ø–∞ {group_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:", reply_markup=schedule_keyboard)
    else:
        valid_groups = get_valid_groups(group_name)
        if valid_groups:
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=group)] for group in valid_groups],
                resize_keyboard=True
            )
            await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø:", reply_markup=keyboard)
        else:
            await message.answer("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(UserFSM.schedule_action)
async def handle_schedule_action(message: Message, state: FSMContext):
    data = await state.get_data()
    group_id = data.get("group_id")
    action = message.text.lower().replace(" ", "_")

    if action not in ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "—ç—Ç–∞_–Ω–µ–¥–µ–ª—è", "—Å–ª–µ–¥—É—é—â–∞—è_–Ω–µ–¥–µ–ª—è"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return

    schedule = get_schedule(group_id, action)

    if schedule:
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {data['group']}:\n\n{schedule}")
    else:
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {data['group']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


def validate_group(group_name):
    url = f"https://ruz.fa.ru/api/search?term={group_name}&type=group"
    response = requests.get(url)

    if response.status_code == 200:
        groups = response.json()
        for group in groups:
            if group.get("label") == group_name:
                return group.get("id")
    return None


def get_valid_groups(group_name):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –≥—Ä—É–ø–ø, –µ—Å–ª–∏ –≤–≤–µ–¥—ë–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ–≤–µ—Ä–Ω–∞
    url = f"https://ruz.fa.ru/api/search?term={group_name}&type=group"
    response = requests.get(url)
    valid_groups = []

    if response.status_code == 200:
        groups = response.json()
        for group in groups:
            valid_groups.append(group.get("label"))

    return valid_groups


def get_schedule(group_id, period):
    base_url = "https://ruz.fa.ru/api/schedule/group"

    today = datetime.now()
    if period == "—Å–µ–≥–æ–¥–Ω—è":
        start_date = finish_date = today.strftime("%Y.%m.%d")
    elif period == "–∑–∞–≤—Ç—Ä–∞":
        start_date = finish_date = (today + timedelta(days=1)).strftime("%Y.%m.%d")
    elif period == "—ç—Ç–∞_–Ω–µ–¥–µ–ª—è":
        start_date = (today - timedelta(days=today.weekday())).strftime("%Y.%m.%d")
        finish_date = (today + timedelta(days=6 - today.weekday())).strftime("%Y.%m.%d")
    elif period == "—Å–ª–µ–¥—É—é—â–∞—è_–Ω–µ–¥–µ–ª—è":
        start_date = (today + timedelta(days=7 - today.weekday())).strftime("%Y.%m.%d")
        finish_date = (today + timedelta(days=13 - today.weekday())).strftime("%Y.%m.%d")
    else:
        return None

    url = f"{base_url}/{group_id}?start={start_date}&finish={finish_date}&lng=1"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        return parse_schedule(data)
    else:
        return None


def parse_schedule(data):
    if not data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏."
    
    schedule = []
    count = 1
    day_schedule = {}  
    for lesson in data:
        subject = lesson.get("discipline", "").strip()
        if not subject:
            continue

        day = lesson.get("dayOfWeekString", "")
        date = lesson.get("date", "")        
        lesson_info = f'‚è±Ô∏è {lesson.get("beginLesson", "")} - {lesson.get("endLesson", "")} ‚è±Ô∏è\n' \
                      f'<b>{subject}</b>\n' \
                      f'–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.get("lecturer", "")}\n' \
                      f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson.get("auditorium", "")}\n'

        if day in day_schedule:
            day_schedule[day].append(f'{lesson_info}')
        else:
            day_schedule[day] = [f'üìÜ <b>{day}</b>, {date}\n' + lesson_info]
    for day, lessons in day_schedule.items():
        schedule.append("\n".join(lessons))
    return "\n\n".join(schedule)